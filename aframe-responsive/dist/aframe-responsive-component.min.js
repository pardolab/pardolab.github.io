"use strict";function responsiveParseFunction(t){if(!t||0===t.length)return[];try{return JSON.parse(t)}catch(t){return console.log("Please, check that both the properties and values\n                   are using double quotes, instead of single quotes. This\n                   uses JSON.parse() to get it.\n                   "),console.log(t.message),[]}}AFRAME.registerComponent("responsive",{schema:{controller:{type:"selector"},_default:{type:"string",parse:function(t){return responsiveParseFunction(t)}},vive:{type:"string",parse:function(t){return responsiveParseFunction(t)}},oculus:{type:"string",parse:function(t){return responsiveParseFunction(t)}},daydream:{type:"string",parse:function(t){return responsiveParseFunction(t)}},gearvr:{type:"string",parse:function(t){return responsiveParseFunction(t)}},windows:{type:"string",parse:function(t){return responsiveParseFunction(t)}}},init:function(){if(this.hasSetup=!1,this.data._default&&0!==this.data._default.length){var t=this.data.controller;this.addEventListeners(t),this.mapControllers()}else console.warn("You need to specify at least a default property")},update:function(t){0!==Object.keys(t).length&&(t.controller.object3D.uuid!==this.data.controller.object3D.uuid&&(this.removeEventListeners(t.controller),this.addEventListeners(this.data.controller)),this.updateControllerData("daydream-controls",t.daydream,this.data.daydream),this.updateControllerData("gearvr-controls",t.gearvr,this.data.gearvr),this.updateControllerData("oculus-touch-controls",t.oculus,this.data.oculus),this.updateControllerData("vive-controls",t.vive,this.data.vive),this.updateControllerData("windows-motion-controls",t.windows,this.data.windows))},updateControllerData:function(t,e,o){if(t.length===o.length){for(var r=!1,n=0;n<e.length;n+=1)if(e[n].attr!==o[n].attr||e[n].value!==o[n].value){r=!0;break}r&&this.controlMap.set(t,this.getControllerProp(o))}else this.controlMap.set(t,o)},play:function(){!this.hasSetup&&this.data._default&&0!==this.data._default.length&&(this.setProp("default"),this.hasSetup=!0)},addEventListeners:function(t){t?(t.addEventListener("controllerconnected",this.processControllerConnection.bind(this)),t.addEventListener("controllerdisconnected",this.processControllerConnection.bind(this))):console.warn("There are no controllers to look for. \n        Please add a controllerSelector property to continue, and match the controllers.")},removeEventListeners:function(t){t&&(t.removeEventListener("controllerconnected",this.processControllerConnection.bind(this)),t.removeEventListener("controllerdisconnected",this.processControllerConnection.bind(this)))},mapControllers:function(){var t=new Map;t.set("daydream-controls",this.getControllerProp(this.data.daydream)),t.set("gearvr-controls",this.getControllerProp(this.data.gearvr)),t.set("oculus-touch-controls",this.getControllerProp(this.data.oculus)),t.set("vive-controls",this.getControllerProp(this.data.vive)),t.set("windows-motion-controls",this.getControllerProp(this.data.windows)),t.set("default",this.getControllerProp(this.data._default)),this.controlMap=t},getControllerProp:function(t){return t.length>0?t:this.data._default},setProp:function(t){var e=this;this.controlMap.get(t).forEach(function(t){var o=t.value.join(";");e.el.setAttribute(t.attr,o)}),this.activeController=t},removeProp:function(){var t=this,e=this.activeController;e||this.controlMap.get(e).forEach(function(e){t.el.removeAttribute(e.attr)})},processControllerConnection:function(t){this.hasSetup=!0;var e=t.detail.name;this.setProp(e)}});